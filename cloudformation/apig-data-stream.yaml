AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Pipes - Api Gateway Kinesis Firehose Pipeline

Parameters:
  Name:
    Type: String
  Stage:
    Type: String

Resources:

  DataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: ${Name}-data-lake-${Stage}

  EventStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: 
        Fn::Sub: ${Name}-stream-${Stage}
      RetentionPeriodHours: 24
      ShardCount: 1

  ValidatorFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs10.x
      MemorySize: 128
      Timeout: 60
      Handler: index.handler 
      CodeUri: ../functions/apig-validator/
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - kinesis:GetShardIterator
                - kinesis:GetRecords
                - kinesis:DescribeStream
              Resource:
                Fn::GetAtt: [EventStream, Arn]
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - kinesis:ListStreams
              Resource: "*"
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - firehose:PutRecord
                - firehose:PutRecordBatch
              Resource:
                Fn::GetAtt: [EventFirehose, Arn]
      Events:
        Stream:
          Type: Kinesis
          Properties:
            Stream:
              Fn::GetAtt: [EventStream, Arn]
            BatchSize: 10
            StartingPosition: LATEST
    
  KinesisRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - firehose.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: KinesisRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - s3:AbortMultipartUpload
                - s3:GetBucketLocation
                - s3:GetObject
                - s3:ListBucket
                - s3:ListBucketMultipartUploads
                - s3:PutObject
              Resource:
                - Fn::GetAtt: [ DataBucket , Arn ]
                - Fn::Join:
                  - ""
                  - - Fn::GetAtt: [ DataBucket , Arn ]
                    - "/*"  
  EventFirehose:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      S3DestinationConfiguration:
        BucketARN:
          Fn::GetAtt: [ DataBucket, Arn ]
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 10
        CompressionFormat: GZIP
        Prefix: events/
        RoleARN:
          Fn::GetAtt: [ KinesisRole, Arn ]


  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name:
        Fn::Join:
          - ""
          - - Fn::Sub: ${Name}-${Stage} 
            - "-api"

  ApiGatewayPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false 
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS 
        Credentials:
          Fn::GetAtt: [ GatewayRole, Arn ] 
        Uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":kinesis:action/PutRecord" 
        IntegrationHttpMethod: POST 
        RequestTemplates:
          application/json: !Sub | 
            #set( $key = "apiKey" )
            #set( $key_ = $context.identity.apiKey )
            #set( $type = "type")
            #set( $type_val = "identity")
            #set( $trace_id_val = $input.params().get("header").get("X-Amzn-Trace-Id"))#set( $bodyname = "body" )
            #set( $trace_id = "trace_id")
            #set( $received_at = "received_at")
            #set( $received_at_val = $context.requestTime)
            #set( $data = "data")
            #set( $data_val = $input.body)
            #set( $message_id = "message_id")
            #set( $message_id_val = $context.requestId)
            #set( $quote = '"' )
            #set( $b64 = $util.base64Encode("{$quote$key$quote:$quote$key_val$quote,$quote$type$quote:$quote$type_val$quote,$quote$message_id$quote:$quote$message_id_val$quote,$quote$trace_id$quote:$quote$trace_id_val$quote,$quote$received_at$quote:$quote$received_at_val$quote,$quote$data$quote:$data_val}") )
            {
             "StreamName": "${EventStream}", 
             "PartitionKey": "$message_id_val",
             "Data": "$b64" 
            }
        RequestParameters: 
          integration.request.header.Content-Type: "'application/x-amz-json-1.1'"
        IntegrationResponses:
          - StatusCode: 200 
            ResponseTemplates:
              application/json: '{"status":"OK"}'
      MethodResponses:
        - StatusCode: 200
      ResourceId:
        Fn::GetAtt: [ ApiGatewayRestApi , RootResourceId ]
      RestApiId: !Ref ApiGatewayRestApi

  GatewayRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: GatewayRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - kinesis:PutRecord
                - kinesis:PutRecords
              Resource: "*"

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayPostMethod
    Properties:
      RestApiId: 
        Ref: ApiGatewayRestApi
      StageName: 
        Fn::Sub: ${Stage}

Outputs:
  ApiUrl:
    Description: Url of your API endpoint
    Value:
      Fn::Join:
        - ''
        - - https://
          - Ref: ApiGatewayRestApi 
          - '.execute-api.'
          - Ref: 'AWS::Region'
          - '.amazonaws.com/'
          - Fn::Sub: ${Stage} 
  

